import React, {ChangeEvent, useState, useRef, useEffect} from 'react';import s from './Css.module.css'import {Button, ButtonGroup, TextField} from "@mui/material";const message = {    error: 'incorrect value',    default: 'enter press set'}function App() {    const [increment, setIncrement] = useState(0)    const [valueMax, setValueMax] = useState('5')    const [valueMin, setValueMin] = useState('0')    const [isEdit, setIsEdit] = useState(false)    const [prompt, setPrompt] = useState(message.default)    useEffect(() => {        const valueString = localStorage.getItem('incrementKey') || '0'        const valueMaxString = localStorage.getItem('valueMaxKey') || valueMax        const valueMinString = localStorage.getItem('valueMinKey') || valueMin        setIncrement(+valueString)        setValueMax(valueMaxString)        setValueMin(valueMinString)    }, [])    const onChangeMaxHandler = (e: ChangeEvent<HTMLInputElement>) => {        setValueMax(e.currentTarget.value)        setIsEdit(true)        checkedError({max: e.currentTarget.value})        localStorage.setItem('valueMaxKey', e.currentTarget.value)    }    const onChangeMinHandler = (e: ChangeEvent<HTMLInputElement>) => {        setValueMin(e.currentTarget.value)        setIsEdit(true)        checkedError({min: e.currentTarget.value})        localStorage.setItem('valueMinKey', e.currentTarget.value)    }    const onClickApplyHandler = () => {        setIncrement(+valueMin)        setIsEdit(false)        localStorage.setItem('incrementKey', JSON.stringify(+valueMin))    }    const onClickIncrHandler = () => {        setIncrement(increment + 1)        localStorage.setItem('incrementKey', JSON.stringify(increment + 1))    }    const onClickResHandler = () => {        setIncrement(+valueMin)        localStorage.setItem('incrementKey', JSON.stringify(+valueMin))    }    const checkedError = ({max = valueMax, min = valueMin}) => {        if (+min > +max) {            setPrompt(message.error)        } else if (+min < 0 || +max < 0) {            setPrompt(message.error)        } else {            setPrompt(message.default)        }    }    return (        <div className={s.wrapper}>            <div className={`${s.settings}`}>                {prompt === message.error ?                    <TextField                        error                        value={valueMax}                        onChange={onChangeMaxHandler}                        type="number"                        id="outlined-basic"                        label="Error"                        variant="outlined"                        size="small"                        color="secondary"                        margin="dense"                    /> :                    <TextField                        value={valueMax}                        onChange={onChangeMaxHandler}                        type="number"                        id="outlined-basic"                        label="Max"                        variant="outlined"                        size="small"                        color="secondary"                        margin="dense"                    />                }                {prompt === message.error ?                    <TextField                        error                        value={valueMin}                        onChange={onChangeMinHandler}                        type="number"                        id="outlined-basic"                        label="Error"                        variant="outlined"                        size="small"                        color="secondary"                        margin="dense"                    /> :                    <TextField                        value={valueMin}                        onChange={onChangeMinHandler}                        type="number"                        id="outlined-basic"                        label="Min"                        variant="outlined"                        size="small"                        color="secondary"                        margin="dense"                    />                }                <Button disabled={!isEdit || prompt === message.error} onClick={onClickApplyHandler}                        variant="outlined">Set</Button>            </div>            <div className={s.null}>            </div>            <div className={`${s.window}`}>                <div className={s.wrapperSpan}>                    {!isEdit                        ?                        <span className={`${s.spanTrue} ${increment === +valueMax ? s.error : ''} `}> {increment}</span>                        : <span className={`${s.spanFalse} ${prompt === message.error ? s.error : ''}`}> {prompt}</span>                    }                </div>                {                    isEdit ?                        <></>                        :                        <ButtonGroup variant="outlined" aria-label="outlined button group">                            <Button disabled={increment >= +valueMax} onClick={onClickIncrHandler}>inc</Button>                            <Button disabled={increment === +valueMin} onClick={onClickResHandler}>res</Button>                        </ButtonGroup>                }            </div>        </div>    );}export default App;